#include <iostream>
#include <string>

// Base class representing a character
class Character {
protected:
    std::string name;
    int health;

public:
    Character(const std::string& n, int h) : name(n), health(h) {}

    // Virtual function for attacking
    virtual void attack() const {
        std::cout << name << " attacks! ";
    }

    // Function to display character information
    void displayInfo() const {
        std::cout << "Name: " << name << ", Health: " << health << std::endl;
    }
};

// Derived class for warriors
class Warrior : public Character {
public:
    Warrior(const std::string& n) : Character(n, 100) {}

    // Override attack function for warriors
    void attack() const override {
        Character::attack();
        std::cout << "Slashes with a sword!" << std::endl;
    }
};

// Derived class for mages
class Mage : public Character {
public:
    Mage(const std::string& n) : Character(n, 80) {}

    // Override attack function for mages
    void attack() const override {
        Character::attack();
        std::cout << "Casts a fireball!" << std::endl;
    }
};

// Derived class for archers
class Archer : public Character {
public:
    Archer(const std::string& n) : Character(n, 90) {}

    // Override attack function for archers
    void attack() const override {
        Character::attack();
        std::cout << "Shoots an arrow!" << std::endl;
    }
};

int main() {
    Warrior warrior("Warrior1");
    Mage mage("Mage1");
    Archer archer("Archer1");

    // Display initial information
    warrior.displayInfo();
    mage.displayInfo();
    archer.displayInfo();

    // Let characters attack each other
    warrior.attack();
    mage.attack();
    archer.attack();

    // Display updated information after attacks
    warrior.displayInfo();
    mage.displayInfo();
    archer.displayInfo();

    return 0;
}
